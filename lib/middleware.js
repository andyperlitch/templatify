
var fs = require('fs'),
  path = require('path'),
  glob = require('glob'),
  hbs = require('handlebars');

// ### browerify middleware - templatify any html files into precompiled templates.

//
// Partials: (ex. handlebars)
//
//      {{> app_template_partial}}
//
// To include a partial, use underscores instead of slashes in the path, and
// leave off the extension: `{{> app_template_partial }}` will include
// `app/template/partial.html`.
//
// Helpers:
//
//      {{yell "maoow"}}
//
// Helpers may be placed in `dirname` and they'll automagically get pulled in
// as long as they're written as modules, and match the `**/*.js` glob
// pattern.
//
// This middleware expose just the basics of file traversing and leave off the
// actual template implementation to adapters stored in `lib/adapters`
//

// templates to include for later use in include
var body = fs.readFileSync(path.join(__dirname, 'adapters/body.js'), 'utf8');


var middleware = module.exports = function(dir, o) {
  o = o || {};
  dir = dir || './';

  // patterns for files and helpers
  o.files = o.files || '**/*.html';
  o.helpers = o.helpers || '**.js';

  // debug to false will turn off introspection (passed in to adapters who
  // shouldn't attach metadata in debug mode)
  o.debug = typeof o.debug !== 'undefined' ? o.debug : true;

  // glob options
  o.glob = o.glob || {};

  // normalize files / helpers options
  o.files = Array.isArray(o.files) ? o.files : [o.files];
  o.helpers = Array.isArray(o.helpers) ? o.helpers : [o.helpers];

  // the adapter to use, default is handlebars'
  var adapter = o.adapter || require('./adapters/handlebars'),
    files = lookup(dir, o.files, o.glob),
    helpers = lookup(dir, o.helpers, o.glob);

  return function(b) {
    //
    // When `adapter.runtime` is provided, register and include the dependency
    // to browserify. `adapter.runtime` can be either a string (file content) in which case
    // the runtime is registered as `adapter.name` or a hash object with keys as runtime name
    // and values as actual file content.
    //
    // Runtimes are required when browserify packages relies on one or more
    // package (eg. `require('handlerbars');`)
    //
    if(adapter.runtime) {
      if(typeof adapter.runtime === 'string') b.include(null, adapter.name, adapter.runtime);
      else Object.keys(adapter.runtime).forEach(function(key) {
        b.include(null, key, adapter.runtime[key]);
      });
    }

    //
    // Adapters must provide only required method: `adapter.file`. This file method should return
    // a curried function as it will be use as a `forEach` handler.
    //
    // This get called with the base dirname, the debug flag to turn off
    // introspection appropriately and a callback to invoke with the target
    // name (the key to register the package with) and the actual content.
    //
    // If there's an error, it should be passed as a first parameter and be an
    // instance of error or null if everything went well.
    //
    files.forEach(adapter.file(dir, o.debug, function(err, target, content) {
      if(err) throw err;
      b.append(include(target, content));
    }));

    //
    // Register each found helpers. Helpers are simply valid commonjs package that returns a single
    // function and happen to register themselves as template helper as well.
    helpers.forEach(function(h) {
      var name = path.basename(h.filepath).replace(path.extname(h.filepath), '');
      b.append(include('helper:' + name, h.content));
    });

    // The list of package to ignore, basically every package generated by templatify.
    var ign = files.map(function(f) {
      return f.filepath.replace(path.extname(f.filepath), '');
    }).concat(helpers.map(function(h) {
      return 'helpers:' + path.basename(h.filepath).replace(path.extname(h.filepath), '');
    }));

    b.ignore(ign);
  }
};

//
// include - include helper, rather than browserify include to ensure path module
// is always set first. `include` will return the file body wrap as `require.define`
// as browserify would do with `b.include`
//
function include(target, content) {
  return body
    .replace(/\$__filename/g, '"' + target + '"')
    .replace(/\$body/, content);
}

//
// lookup - lookup helper, search for files matching glob patterns provided
// and return a hash for each match with `filepath` and `content`. Sync process.
//
function lookup(dir, files, globOpts) {
  globOpts = globOpts || {};
  return files.map(function(f){
    f = path.join(dir, f).replace(/\\/g, '/');
    return glob.sync(f, globOpts).map(function(f) {
      return {
        filepath: f,
        content: fs.readFileSync(f, 'utf8')
      };
    });
  }).reduce(function(a, b) {
    return a.concat(b);
  }, []);
}
